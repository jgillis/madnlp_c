precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#107#108"}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#109#112"}, Base.Iterators.Zip{NTuple{4, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#110#113"{Float64}}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#111#114"{Float64}}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#115#119"{Float64}}, Base.Iterators.Zip{Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#116#120"{Float64}}, Base.Iterators.Zip{Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#117#121"{Float64}}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{MadNLP.var"#118#122"{Float64}}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.abs), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.min), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 1}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Float64, Array{Float64, 1}}}, Int64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sqrt), Tuple{Array{Float64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Float64, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CUDA_Runtime_Discovery.var"#3#4"{String}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{NTuple{4, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#109#112"}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#107#108"}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#110#113"{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#111#114"{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#117#121"{Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.var"#4#5"{MadNLP.var"#118#122"{Float64}}}})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.filter!), CUDA_Runtime_Discovery.var"#17#20", Array{String, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.Filesystem.isdir), Array{String, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setproperty!), MadNLP.RobustRestorer{Float64, Array{Float64, 1}}, Symbol, Float64})
precompile(Tuple{typeof(Base.unique), Array{String, 1}})
precompile(Tuple{typeof(MadNLP.get_inf_compl_R), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Float64, Float64})
precompile(Tuple{typeof(MadNLP.get_inf_du_R), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Float64, Float64})
precompile(Tuple{typeof(MadNLP.get_obj_val_R), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Float64, Float64})
precompile(Tuple{typeof(MadNLP.set_aug_rhs_RR!), MadNLP.MadNLPSolver{Float64, Array{Float64, 1}, Array{Int64, 1}, MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}, MadNLP_C.GenericModel{Float64, Array{Float64, 1}, Array{Int64, 1}, Ptr{Nothing}}, MadNLP.SparseCallback{Float64, Array{Float64, 1}, Array{Int64, 1}, MadNLP_C.GenericModel{Float64, Array{Float64, 1}, Array{Int64, 1}, Ptr{Nothing}}, MadNLP.MakeParameter{Array{Float64, 1}, Array{Int64, 1}}, MadNLP.EnforceEquality}, MadNLP.RichardsonIterator{Float64, MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}}, MadNLP.InertiaBased, MadNLP.UnreducedKKTVector{Float64, Array{Float64, 1}, Array{Int64, 1}}}, MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}, MadNLP.RobustRestorer{Float64, Array{Float64, 1}}, Float64})
precompile(Tuple{typeof(MadNLP.set_aug_RR!), MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}, MadNLP.MadNLPSolver{Float64, Array{Float64, 1}, Array{Int64, 1}, MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}, MadNLP_C.GenericModel{Float64, Array{Float64, 1}, Array{Int64, 1}, Ptr{Nothing}}, MadNLP.SparseCallback{Float64, Array{Float64, 1}, Array{Int64, 1}, MadNLP_C.GenericModel{Float64, Array{Float64, 1}, Array{Int64, 1}, Ptr{Nothing}}, MadNLP.MakeParameter{Array{Float64, 1}, Array{Int64, 1}}, MadNLP.EnforceEquality}, MadNLP.RichardsonIterator{Float64, MadNLP.SparseKKTSystem{Float64, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int32}, MadNLP.ExactHessian{Float64, Array{Float64, 1}}, MadNLPMumps.MumpsSolver{Float64}, Array{Int64, 1}, Array{Int32, 1}}}, MadNLP.InertiaBased, MadNLP.UnreducedKKTVector{Float64, Array{Float64, 1}, Array{Int64, 1}}}, MadNLP.RobustRestorer{Float64, Array{Float64, 1}}})
